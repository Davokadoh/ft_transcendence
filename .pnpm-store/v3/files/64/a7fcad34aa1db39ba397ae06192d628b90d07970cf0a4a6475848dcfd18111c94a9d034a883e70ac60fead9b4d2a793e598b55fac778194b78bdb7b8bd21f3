{"mappings":"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","sources":["packages/@react-stately/virtualizer/src/index.ts","packages/@react-stately/virtualizer/src/Layout.ts","packages/@react-stately/virtualizer/src/LayoutInfo.ts","packages/@react-stately/virtualizer/src/Point.ts","packages/@react-stately/virtualizer/src/Rect.ts","packages/@react-stately/virtualizer/src/Size.ts","packages/@react-stately/virtualizer/src/ReusableView.ts","packages/@react-stately/virtualizer/src/useVirtualizerState.ts","packages/@react-stately/virtualizer/src/Virtualizer.ts","packages/@react-stately/virtualizer/src/tween.ts","packages/@react-stately/virtualizer/src/utils.ts","packages/@react-stately/virtualizer/src/OverscanManager.ts","packages/@react-stately/virtualizer/src/Transaction.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {InvalidationContext} from './types';\nexport type {VirtualizerState} from './useVirtualizerState';\nexport type {RectCorner} from './Rect';\n\nexport {Layout} from './Layout';\nexport {LayoutInfo} from './LayoutInfo';\nexport {Point} from './Point';\nexport {Rect} from './Rect';\nexport {Size} from './Size';\nexport {ReusableView} from './ReusableView';\nexport {useVirtualizerState} from './useVirtualizerState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns the union of this Rect and another.\n   */\n  union(other: Rect) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Returns the intersection of this Rect with another.\n   * If the rectangles do not intersect, an all zero Rect is returned.\n   */\n  intersection(other: Rect): Rect {\n    if (!this.intersects(other)) {\n      return new Rect(0, 0, 0, 0);\n    }\n\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new Rect(\n      x,\n      y,\n      Math.min(this.maxX, other.maxX) - x,\n      Math.min(this.maxY, other.maxY) - y\n    );\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n\n  /**\n   * The total area of the Size.\n   */\n  get area() {\n    return this.width * this.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let setVisibleRect = useCallback((rect) => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = useCallback(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = useCallback(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n\n  let state = useMemo(() => ({\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  }), [\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  ]);\n\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      // We are already in a layout effect when this method is called, so relayoutNow is appropriate.\n      this.relayoutNow({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this._transactionQueue.length > 0) {\n      this._processTransactionQueue();\n    } else if (this._invalidationContext) {\n      this.relayoutNow();\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (view.layoutInfo?.parentKey != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo?.parentKey)?.push(view);\n      if (!viewsByParentKey.has(view.layoutInfo?.key)) {\n        viewsByParentKey.set(view.layoutInfo?.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur?.key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if (cur?.key != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) {\n            updated = true;\n          }\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n"],"names":[],"version":3,"file":"module.js.map"}